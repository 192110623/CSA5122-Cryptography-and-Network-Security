#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MATRIX_SIZE 5
#define MAX_MESSAGE_LENGTH 100
void generatePlayfairMatrix(char matrix[MATRIX_SIZE][MATRIX_SIZE], char *key) {
    int keyLength = strlen(key);
    int usedLetters[26] = {0};
    int row = 0, col = 0;
    for (int i = 0; i < keyLength; i++) {
        char ch = toupper(key[i]);
        if (ch == 'J')
            ch = 'I';

        if (!usedLetters[ch - 'A']) {
            matrix[row][col] = ch;
            usedLetters[ch - 'A'] = 1;
            col++;
            if (col == MATRIX_SIZE) {
                col = 0;
                row++;
            }
        }
    }
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (ch != 'J' && !usedLetters[ch - 'A']) {
            matrix[row][col] = ch;
            col++;
            if (col == MATRIX_SIZE) {
                col = 0;
                row++;
            }
        }
    }
}
void findPosition(char matrix[MATRIX_SIZE][MATRIX_SIZE], char ch, int *row, int *col) {
    for (int i = 0; i < MATRIX_SIZE; i++) {
        for (int j = 0; j < MATRIX_SIZE; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

void encryptPlayfair(char matrix[MATRIX_SIZE][MATRIX_SIZE], char *plaintext) {
    char cleanedPlaintext[MAX_MESSAGE_LENGTH];
    int index = 0;
    for (int i = 0; plaintext[i] != '\0'; i++) {
        char ch = toupper(plaintext[i]);
        if (isalpha(ch)) {
            cleanedPlaintext[index++] = (ch == 'J') ? 'I' : ch;
        }
    }
    cleanedPlaintext[index] = '\0';
    char preparedPlaintext[MAX_MESSAGE_LENGTH * 2];
    int preparedIndex = 0;
    for (int i = 0; i < strlen(cleanedPlaintext); i += 2) {
        preparedPlaintext[preparedIndex++] = cleanedPlaintext[i];
        if (cleanedPlaintext[i] == cleanedPlaintext[i + 1]) {
            preparedPlaintext[preparedIndex++] = 'X';
        }
        preparedPlaintext[preparedIndex++] = cleanedPlaintext[i + 1];
    }
    preparedPlaintext[preparedIndex] = '\0';
    printf("Encrypted message using Playfair cipher: ");
    for (int i = 0; i < strlen(preparedPlaintext); i += 2) {
        char first = preparedPlaintext[i];
        char second = preparedPlaintext[i + 1];

        int row1, col1, row2, col2;
        findPosition(matrix, first, &row1, &col1);
        findPosition(matrix, second, &row2, &col2);
        if (row1 == row2) {
            printf("%c%c", matrix[row1][(col1 + 1) % MATRIX_SIZE], matrix[row2][(col2 + 1) % MATRIX_SIZE]);
        }
        else if (col1 == col2) {
            printf("%c%c", matrix[(row1 + 1) % MATRIX_SIZE][col1], matrix[(row2 + 1) % MATRIX_SIZE][col2]);
        }
        else {
            printf("%c%c", matrix[row1][col2], matrix[row2][col1]);
        }
    }
    printf("\n");
}

int main() {
    char key[] = "MFHIKUNOPQZVWXELYADSTBC";
    char plaintext[] = "Must see you over Cadogan West. Coming at once";

    char matrix[MATRIX_SIZE][MATRIX_SIZE];
    generatePlayfairMatrix(matrix, key);
    encryptPlayfair(matrix, plaintext);

    return 0;
}
