#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MATRIX_SIZE 5
#define ALPHABET_SIZE 26
void preprocess_key(char *key) {
    int i, j, k = 0;
    char temp[ALPHABET_SIZE] = {0};
    for (i = 0; key[i] != '\0'; i++) {
        if (key[i] != ' ') {
            temp[k++] = tolower(key[i]);
        }
    }
    temp[k] = '\0';
    k = 0;
    for (i = 0; temp[i] != '\0'; i++) {
        int alreadyExists = 0;
        for (j = 0; j < i; j++) {
            if (temp[j] == temp[i]) {
                alreadyExists = 1;
                break;
            }
        }
        if (!alreadyExists) {
            key[k++] = temp[i];
        }
    }
    key[k] = '\0';
}
void generate_matrix(char *key, char matrix[MATRIX_SIZE][MATRIX_SIZE]) {
    char alphabet[ALPHABET_SIZE] = "abcdefghiklmnopqrstuvwxyz";
    int keylen = strlen(key);
    int i, j, k = 0;
    int keymap[ALPHABET_SIZE] = {0};

    for (i = 0; i < keylen; i++) {
        keymap[key[i] - 'a'] = 1;
    }
    for (i = 0; i < MATRIX_SIZE; i++) {
        for (j = 0; j < MATRIX_SIZE; j++) {
            if (k < keylen) {
                matrix[i][j] = key[k++];
            } else {
                while (keymap[alphabet[k] - 'a']) k++;
                matrix[i][j] = alphabet[k++];
            }
        }
    }
}
void find_positions(char matrix[MATRIX_SIZE][MATRIX_SIZE], char a, char b, int *row1, int *col1, int *row2, int *col2) {
    int i, j;
    for (i = 0; i < MATRIX_SIZE; i++) {
        for (j = 0; j < MATRIX_SIZE; j++) {
            if (matrix[i][j] == a) {
                *row1 = i;
                *col1 = j;
            } else if (matrix[i][j] == b) {
                *row2 = i;
                *col2 = j;
            }
        }
    }
}
void playfair_encrypt(char matrix[MATRIX_SIZE][MATRIX_SIZE], char a, char b) {
    int row1, col1, row2, col2;

    find_positions(matrix, a, b, &row1, &col1, &row2, &col2);

    if (row1 == row2) {
        printf("%c%c", matrix[row1][(col1 + 1) % MATRIX_SIZE], matrix[row2][(col2 + 1) % MATRIX_SIZE]);
    } else if (col1 == col2) {
        printf("%c%c", matrix[(row1 + 1) % MATRIX_SIZE][col1], matrix[(row2 + 1) % MATRIX_SIZE][col2]);
    } else {
        printf("%c%c", matrix[row1][col2], matrix[row2][col1]);
    }
}

int main() {
    char key[ALPHABET_SIZE];
    char matrix[MATRIX_SIZE][MATRIX_SIZE];
    char plaintext[100];
    int i;

    printf("Enter the key: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0';
    preprocess_key(key);

    generate_matrix(key, matrix);

    printf("Enter plaintext (letters only, no spaces): ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';

    if (strlen(plaintext) % 2 != 0) {
        strcat(plaintext, "x");
    }

    printf("Ciphertext: ");
    for (i = 0; i < strlen(plaintext); i += 2) {
        playfair_encrypt(matrix, plaintext[i], plaintext[i+1]);
    }
    printf("\n");

    return 0;
}
