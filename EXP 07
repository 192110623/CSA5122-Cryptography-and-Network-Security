#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ALPHABET_SIZE 26
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++)
        if ((a * x) % m == 1)
            return x;
    return -1;
}
void breakAffineCipher(char *ciphertext, char frequentChar, char secondFrequentChar) {
    int freqCount = 0, secondFreqCount = 0;
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (ciphertext[i] == frequentChar)
            freqCount++;
        else if (ciphertext[i] == secondFrequentChar)
            secondFreqCount++;
    }
    float englishFreq[26] = {
        0.0817, 0.0149, 0.0278, 0.0425, 0.127, 0.0223, 0.0202,  // a-g
        0.0609, 0.0697, 0.0015, 0.0077, 0.0402, 0.0241, 0.0675,  // h-n
        0.0751, 0.0193, 0.0009, 0.0599, 0.0633, 0.0906, 0.0276,  // o-u
        0.0098, 0.0236, 0.0015, 0.0197, 0.0007                   // v-z
    };
    int shift = (frequentChar - 'B' + ALPHABET_SIZE) % ALPHABET_SIZE;
    int a = (secondFreqCount - freqCount + ALPHABET_SIZE) % ALPHABET_SIZE;
    int b = (frequentChar - 'A' - (a * (secondFrequentChar - 'A'))) % ALPHABET_SIZE;
    int aInverse = modInverse(a, ALPHABET_SIZE);
    if (aInverse == -1) {
        printf("Error: Inverse of %d does not exist in mod %d\n", a, ALPHABET_SIZE);
        return;
    }
    printf("Decrypted text using affine cipher:\n");
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            int decryptedChar = ((aInverse * (ciphertext[i] - 'A' - b)) % ALPHABET_SIZE + ALPHABET_SIZE) % ALPHABET_SIZE;
            printf("%c", decryptedChar + 'A');
        } else {
            printf("%c", ciphertext[i]);
        }
    }
    printf("\n");
}

int main() {
    char ciphertext[] = "YOUR_CIPHERTEXT_HERE";
    char frequentChar = 'B';
    char secondFrequentChar = 'U';

    breakAffineCipher(ciphertext, frequentChar, secondFrequentChar);

    return 0;
}
