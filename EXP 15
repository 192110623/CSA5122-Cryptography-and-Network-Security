#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ALPHABET_SIZE 26
void calculateFrequency(char text[], int frequency[]) {
    int i;
    for (i = 0; text[i] != '\0'; i++) {
        if (text[i] >= 'a' && text[i] <= 'z') {
            frequency[text[i] - 'a']++;
        }
    }
}
void decrypt(char ciphertext[], int key) {
    int len = strlen(ciphertext);
    char decrypted[len + 1];
    
    for (int i = 0; i < len; i++) {
        decrypted[i] = ((ciphertext[i] - 'a' - key + ALPHABET_SIZE) % ALPHABET_SIZE) + 'a';
    }
    decrypted[len] = '\0';
    
    printf("Key: %d, Decrypted Text: %s\n", key, decrypted);
}
void frequencyAttack(char ciphertext[], int topN) {
    int frequency[ALPHABET_SIZE] = {0};
    calculateFrequency(ciphertext, frequency);
    int maxFreqIndex = 0;
    for (int i = 1; i < ALPHABET_SIZE; i++) {
        if (frequency[i] > frequency[maxFreqIndex]) {
            maxFreqIndex = i;
        }
    }
    int key = (maxFreqIndex - ('e' - 'a') + ALPHABET_SIZE) % ALPHABET_SIZE;
    decrypt(ciphertext, key);
}

int main() {
    char ciphertext[] = "Khoor, zruog l'p sduwqdphqw phprphqw l'qflkhu lv, lqgld fdhvdu";
    int topN = 10;
    
    printf("Ciphertext: %s\n", ciphertext);
    printf("Possible plaintexts:\n");
    frequencyAttack(ciphertext, topN);
    
    return 0;
}
